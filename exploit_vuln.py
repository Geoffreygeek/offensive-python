from flask import Flask, request, jsonify, session, redirect, url_for, render_template_string
import sqlite3
import subprocess
import logging

app = Flask(__name__)
app.secret_key = 'supersecretkey'  # Secret key for session management

# Initialize logging
logging.basicConfig(level=logging.INFO)

# Mock database connection
def get_db_connection():
    conn = sqlite3.connect(':memory:')  # In-memory database
    conn.execute('CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)')
    conn.execute("INSERT INTO users (username, password) VALUES ('admin', 'admin123')")
    return conn

# Home route
@app.route('/')
def index():
    """
    Displays a simple index page with a form for user login.
    Vulnerable to XSS if user input is not properly sanitized.
    """
    return '''
        <h1>Welcome</h1>
        <form action="/login" method="post">
            Username: <input type="text" name="username"><br>
            Password: <input type="password" name="password"><br>
            <input type="submit" value="Login">
        </form>
        <form action="/file" method="get">
            File to include (LFI): <input type="text" name="file"><br>
            <input type="submit" value="Include File">
        </form>
    '''

@app.route('/login', methods=['POST'])
def login():
    """
    Vulnerable login function that allows SQL injection.
    """
    username = request.form['username']
    password = request.form['password']
    
    # SQL Injection vulnerability
    conn = get_db_connection()
    query = f"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'"
    user = conn.execute(query).fetchone()
    conn.close()

    if user:
        session['username'] = username
        return f"Logged in as {username}."
    return "Login failed."

@app.route('/csrf_action', methods=['POST'])
def csrf_action():
    """
    A CSRF vulnerable action that changes user settings.
    """
    if 'username' in session:
        new_setting = request.form.get('setting')
        logging.info(f"User {session['username']} changed setting to {new_setting}")
        return f"Setting changed to {new_setting}"
    return "User not authenticated."

@app.route('/execute_command', methods=['POST'])
def execute_command():
    """
    Command injection vulnerability. Executes arbitrary shell commands.
    """
    command = request.form['command']
    try:
        output = subprocess.check_output(command, shell=True)
        return f"Command Output:\n{output.decode()}"
    except subprocess.CalledProcessError as e:
        return f"Error: {str(e)}"

@app.route('/file', methods=['GET'])
def include_file():
    """
    Local File Inclusion (LFI) vulnerability. Allows including local files.
    """
    file_name = request.args.get('file')
    try:
        return send_from_directory('.', file_name)  # Vulnerable to LFI
    except Exception as e:
        return f"Error including file: {str(e)}"

@app.route('/data', methods=['GET'])
def sensitive_data():
    """
    Exposes sensitive data without proper protection.
    """
    return jsonify({
        'credit_card': '1234-5678-9876-5432',
        'social_security': '123-45-6789',
    })

if __name__ == '__main__':
    app.run(debug=True)
